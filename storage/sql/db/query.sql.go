// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (
    code,
    description,
    quantity,
    order_id
) VALUES ($1, $2, $3, $4) RETURNING id, order_id, code, description, quantity
`

type CreateItemParams struct {
	Code        string
	Description string
	Quantity    int32
	OrderID     int32
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, createItem,
		arg.Code,
		arg.Description,
		arg.Quantity,
		arg.OrderID,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Code,
		&i.Description,
		&i.Quantity,
	)
	return i, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO "orders" (customer_name) VALUES ($1)
RETURNING id, customer_name, ordered_at
`

func (q *Queries) CreateOrder(ctx context.Context, customerName string) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, customerName)
	var i Order
	err := row.Scan(&i.ID, &i.CustomerName, &i.OrderedAt)
	return i, err
}

const deleteItemByOrderID = `-- name: DeleteItemByOrderID :exec
DELETE FROM items WHERE order_id = $1
`

func (q *Queries) DeleteItemByOrderID(ctx context.Context, orderID int32) error {
	_, err := q.db.Exec(ctx, deleteItemByOrderID, orderID)
	return err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getItemByOrderID = `-- name: GetItemByOrderID :many
SELECT id, order_id, code, description, quantity FROM items WHERE order_id = $1
`

func (q *Queries) GetItemByOrderID(ctx context.Context, orderID int32) ([]Item, error) {
	rows, err := q.db.Query(ctx, getItemByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Code,
			&i.Description,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrder = `-- name: GetOrder :one
SELECT id, customer_name, ordered_at FROM orders WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(&i.ID, &i.CustomerName, &i.OrderedAt)
	return i, err
}

const getOrders = `-- name: GetOrders :many
SELECT id, customer_name, ordered_at FROM orders
`

func (q *Queries) GetOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(&i.ID, &i.CustomerName, &i.OrderedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders SET customer_name = $1 WHERE id = $2 RETURNING id, customer_name, ordered_at
`

type UpdateOrderParams struct {
	CustomerName string
	ID           int32
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder, arg.CustomerName, arg.ID)
	var i Order
	err := row.Scan(&i.ID, &i.CustomerName, &i.OrderedAt)
	return i, err
}
